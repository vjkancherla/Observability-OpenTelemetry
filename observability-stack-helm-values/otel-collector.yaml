mode: deployment

image:
  repository: otel/opentelemetry-collector-k8s
  tag: 0.115.1

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 512Mi

# Enable metrics port for Prometheus scraping
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    protocol: TCP
  metrics:
    enabled: true
    containerPort: 8889
    servicePort: 8889
    protocol: TCP

config:
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318
  
  processors:
    batch:
      timeout: 10s
      send_batch_size: 1024
    
    resource:
      attributes:
        - key: cluster.name
          value: k3d-mycluster
          action: upsert
    
    attributes:
      actions:
        - key: service.name
          action: upsert
          from_attribute: service.name
    
    # Memory limiter (required)
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25
  
  exporters:
    # Tempo exporter for traces
    otlp/tempo:
      endpoint: dev-tempo.observability.svc.cluster.local:4317
      tls:
        insecure: true
    
    # Prometheus exporter for metrics
    prometheus:
      endpoint: ${env:MY_POD_IP}:8889
      resource_to_telemetry_conversion:
        enabled: true
    
    # Loki exporter for logs
    loki:
      endpoint: http://dev-loki.observability.svc.cluster.local:3100/loki/api/v1/push
      labels:
        resource:
          service.name: "service_name"
        attributes:
          level: "level"
    
    # Debug exporter (optional, for troubleshooting)
    debug:
      verbosity: detailed
  
  connectors:
    # Span Metrics Connector - KEY COMPONENT
    # Generates metrics from spans with trace_id as exemplar
    spanmetrics:
      histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
      dimensions:
        - name: http.method
          default: GET
        - name: http.status_code
        - name: service.name
      exemplars:
        enabled: true
      metrics_flush_interval: 15s
  
  extensions:
    # Health check extension (required)
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
  
  service:
    extensions: [health_check]
    pipelines:
      # Traces pipeline
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch, resource, attributes]
        exporters: [otlp/tempo, spanmetrics]
      
      # Metrics pipeline (includes span-generated metrics)
      metrics:
        receivers: [spanmetrics]
        processors: [memory_limiter, batch, resource]
        exporters: [prometheus]
      
      # Logs pipeline
      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch, resource, attributes]
        exporters: [loki]

# Service configuration
service:
  type: ClusterIP

# ServiceMonitor for Prometheus scraping
serviceMonitor:
  enabled: true
  extraLabels:
    release: dev-prometheus